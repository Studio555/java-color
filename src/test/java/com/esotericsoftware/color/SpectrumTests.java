
package com.esotericsoftware.color;

import org.junit.jupiter.api.Test;

import com.esotericsoftware.color.space.CCT;
import com.esotericsoftware.color.space.XYZ;

public class SpectrumTests extends Tests {
	@Test
	public void testD65 () {
		spectrum("D65",
			new float[] {47.51734f, 49.700054f, 51.882774f, 65.17146f, 78.46016f, 82.603355f, 86.74654f, 87.659454f, 88.57237f,
				85.359024f, 82.14569f, 90.730385f, 99.31508f, 105.05395f, 110.79282f, 111.16724f, 111.54164f, 110.137375f,
				108.733116f, 109.22752f, 109.721924f, 106.35713f, 102.99234f, 103.24428f, 103.4962f, 102.75723f, 102.01829f,
				100.58447f, 99.15065f, 100.519005f, 101.88735f, 100.33522f, 98.78309f, 98.61025f, 98.43741f, 96.52251f, 94.60762f,
				92.87224f, 91.13684f, 90.87758f, 90.61832f, 87.276306f, 83.93429f, 84.56606f, 85.19783f, 85.012115f, 84.82639f,
				83.93097f, 83.03555f, 80.951836f, 78.868126f, 79.07695f, 79.28577f, 77.555664f, 75.825554f, 75.925896f, 76.02623f,
				77.01105f, 77.99586f, 76.11204f, 74.228226f, 70.16018f, 66.09213f, 66.99663f, 67.90114f, 69.18593f, 70.470726f,
				64.43035f, 58.38999f, 62.311928f, 66.23385f}, //
			6504, 0.0032f, // K, Duv (D65 is not actually 6500 and is off the Planckian locus)
			95.047f, 100, 108.883f, // XYZ
			223.3f, // LER
			// CRI
			100, new float[] {100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
			// TM30
			100f, 100f,
			new float[] {100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
				100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
				100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
				100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
				100, 100, 100, 100, 100, 100, 100, 100, 100});
	}

	@Test
	public void test12248K () {
		spectrum("12248K",
			new float[] {1.9956915E-5f, 6.5079814E-7f, 7.2967196E-5f, 4.9119168E-5f, 6.737685E-5f, 7.471229E-4f, 0.0027926343f,
				0.008958212f, 0.022782302f, 0.049911488f, 0.096607715f, 0.17858425f, 0.32043064f, 0.54326475f, 0.7663351f,
				0.84297574f, 0.86724174f, 0.8475948f, 0.6375252f, 0.4356444f, 0.33712322f, 0.27986094f, 0.25515273f, 0.27100497f,
				0.31115606f, 0.361704f, 0.4109917f, 0.43710703f, 0.43414515f, 0.40508145f, 0.37555763f, 0.34917766f, 0.33023882f,
				0.31511894f, 0.3022646f, 0.29212895f, 0.2877126f, 0.28333247f, 0.27805996f, 0.27323082f, 0.26717374f, 0.26204816f,
				0.25545767f, 0.24907894f, 0.24074167f, 0.23030971f, 0.21889398f, 0.20637617f, 0.19475487f, 0.17974879f, 0.16644242f,
				0.15099876f, 0.13804492f, 0.12367863f, 0.11070015f, 0.098822735f, 0.086905725f, 0.077724256f, 0.06766837f,
				0.059316892f, 0.05157541f, 0.04482299f, 0.03873342f, 0.033951487f, 0.029382681f, 0.02482429f, 0.02135591f,
				0.01893067f, 0.016218701f, 0.013470215f, 0.011245683f}, //
			12248, 0.0125f, // K, Duv
			90.419f, 100, 154.667f, // XYZ
			275.2f, // LER
			// CRI
			86.8f, new float[] {86.7f, 95.1f, 93, 79.5f, 85.1f, 93.2f, 86.7f, 75.3f, 27.7f, 89.7f, 83, 57.7f, 89.6f, 95.8f},
			// TM30
			83.1f, 89.5f,
			new float[] {90, 82, 74.6f, 83.5f, 69.9f, 88.9f, 77.5f, 74.5f, 94.7f, 89.2f, 89, 87.7f, 89.4f, 97.6f, 85.6f, 86.7f,
				92.3f, 88.9f, 97.5f, 89.9f, 96.9f, 90.7f, 92.1f, 97, 98.3f, 91.5f, 76.5f, 99.2f, 76.8f, 63.9f, 79.2f, 89.3f, 75.5f,
				93.8f, 95.9f, 60.7f, 92.2f, 57.9f, 94.5f, 95.1f, 82.3f, 91.4f, 86.4f, 98.5f, 86.9f, 82.3f, 79.1f, 66.1f, 85, 87.4f,
				87.7f, 91.3f, 85.2f, 81.7f, 78.9f, 79.8f, 76.7f, 76.9f, 91.9f, 85.2f, 87.5f, 67.7f, 83.5f, 77, 74.9f, 72.9f, 72.1f,
				83.6f, 85, 83, 64.3f, 91.2f, 78.3f, 83.4f, 70.5f, 93.5f, 87.8f, 87.9f, 90.8f, 89.3f, 71.6f, 95.5f, 87.8f, 91.5f,
				78.1f, 71.1f, 78.6f, 78.9f, 76.4f, 77.6f, 50.7f, 65.9f, 77.6f, 67.5f, 69.7f, 84.2f, 90.3f, 84.4f, 76.1f});
	}

	@Test
	public void test2693K () {
		spectrum("2693K",
			new float[] {0, 4.63404E-5f, 0, 0, 1.5213385E-5f, 9.423979E-5f, 9.168864E-4f, 0.0028124647f, 0.0064910487f, 0.012795517f,
				0.02279974f, 0.0390725f, 0.06805827f, 0.1170179f, 0.16432652f, 0.1575605f, 0.1220362f, 0.104939625f, 0.089811146f,
				0.074604176f, 0.07138669f, 0.078204855f, 0.09273041f, 0.11514827f, 0.14413005f, 0.17675176f, 0.2042852f, 0.22344083f,
				0.22672012f, 0.2216629f, 0.21877827f, 0.21566968f, 0.21817768f, 0.22400996f, 0.23127443f, 0.24344486f, 0.25917032f,
				0.27861613f, 0.3021151f, 0.32792792f, 0.35429275f, 0.38377586f, 0.408816f, 0.43241256f, 0.45326993f, 0.46532592f,
				0.47195804f, 0.47294563f, 0.46705198f, 0.4541297f, 0.43623033f, 0.41614583f, 0.39360654f, 0.36603737f, 0.33775654f,
				0.3111323f, 0.28119075f, 0.25442648f, 0.22915915f, 0.20544398f, 0.18283239f, 0.1611802f, 0.14258896f, 0.12463731f,
				0.108614735f, 0.09427616f, 0.08153917f, 0.071077645f, 0.0615825f, 0.052478794f, 0.04471357f}, //
			2693, -0.0001f, // K, Duv
			112.129f, 100, 31.43f, // XYZ
			307.8f, // LER
			// CRI
			90.2f, new float[] {91.1f, 96.9f, 94.6f, 92.7f, 92.7f, 96.8f, 86.4f, 70.4f, 36.9f, 94.8f, 97.3f, 88.4f, 93, 97.5f},
			// TM30
			91.1f, 98.3f,
			new float[] {94.9f, 88.2f, 85.1f, 95.1f, 75.3f, 86.6f, 81.7f, 75.9f, 97.2f, 87.9f, 86.2f, 87.9f, 88.8f, 97.6f, 93.3f,
				81.9f, 86.7f, 92.4f, 93.9f, 76.4f, 93.9f, 91.7f, 98.1f, 96.7f, 96.5f, 94.8f, 94.2f, 98.1f, 95.6f, 97.1f, 95.7f, 91,
				96.9f, 98.1f, 98.5f, 87.4f, 98, 93.3f, 96.6f, 93.2f, 96.2f, 98, 94.5f, 98.8f, 97.6f, 94.5f, 89.6f, 90.4f, 94.9f,
				97.7f, 96.7f, 96.8f, 97.3f, 94.7f, 94.5f, 95.9f, 95.7f, 96.2f, 97.5f, 95.2f, 94.9f, 92.7f, 93.9f, 95.1f, 88.7f, 95,
				94.1f, 93.6f, 94.2f, 91.6f, 89.8f, 96.4f, 87.5f, 90.3f, 90.1f, 93.3f, 84, 89.2f, 87.7f, 89.4f, 71.9f, 95.7f, 93.9f,
				93.9f, 78.5f, 72.3f, 89.1f, 92.2f, 80.9f, 93.7f, 81.7f, 73.3f, 84.1f, 71, 82, 89.3f, 94.2f, 91, 85});
	}

	public void spectrum (String name, float[] values, //
		float exK, float exDuv, //
		float exX, float exY, float exZ, //
		float exLER, //
		float exRa, float[] exCriSamples, //
		float exRf, float exRg, float[] exTm30Samples) {

		Spectrum spectrum = new Spectrum(values);

		CCT cct = spectrum.CCT();
		assertEquals(exK, cct.K(), 3f, "CCT#K: " + name); // The 380-700nm samples are less accurate.
		assertEquals(exDuv, cct.Duv(), 0.0001f, "Spectrum Duv: " + name);

		XYZ xyz = spectrum.XYZ().norY();
		assertEquals(exX, xyz.X(), 0.1f, "Spectrum XYZ#X: " + name);
		assertEquals(exY, xyz.Y(), 0.1f, "Spectrum XYZ#Y: " + name);
		assertEquals(exZ, xyz.Z(), 0.1f, "Spectrum XYZ#Z: " + name);

		assertEquals(exLER, spectrum.LER(Observer.Default), 0.1f, "Spectrum LER: " + name);

		CRI cri = spectrum.CRI(CRI.Method.UVW);
		// System.out.println("CRI: actual, expected");
		// System.out.println("Ra: " + cri.Ra() + ", " + exRa);
		// for (int i = 0; i < exCriSamples.length; i++)
		// System.out.println("TCS" + (i + 1) + ": " + cri.samples()[i] + ", " + exCriSamples[i]);
		assertEquals(exRa, cri.Ra(), 0.5f, "CRI#Ra: " + name);
		for (int i = 0; i < exCriSamples.length; i++)
			assertEquals(exCriSamples[i], cri.samples()[i], 0.4f, "CRI sample " + i + ": " + name);

		TM30 tm30 = spectrum.TM30();
		// System.out.println("TM30: actual, expected");
		// System.out.println("Rf: " + tm30.Rf() + ", " + exRf);
		// System.out.println("Rg: " + tm30.Rg() + ", " + exRg);
		// for (int i = 0; i < exTm30Samples.length; i++)
		// System.out.println("CES" + (i + 1) + ": " + tm30.samples()[i] + ", " + exTm30Samples[i]);
		assertEquals(exRf, tm30.Rf(), 0.9f, "TM30#Rf: " + name);
		assertEquals(exRg, tm30.Rg(), 1, "TM30#Rg: " + name);
		for (int i = 0, n = exTm30Samples.length; i < n; i++)
			assertEquals(exTm30Samples[i], tm30.RfCESi()[i], 5f, "TM30 sample " + i + ": " + name);
	}
}
